def read_coordinates(filename):
  coordinates = []
  with open("square.in", 'r') as file:
    for line in file:
      x, y = line.strip().split()
      coordinates.append([int(x), int(y)])
  return coordinates
def printGrid(grid):
  for i in grid:
    for j in i:
      if j == False:
        print("-",end = "")
      else:
        print("o", end = "")
    print("")   
# Example usage:
def helperFunc(grid,i,j,isAlive):
  # Calculate the number of live neighbors
  live_neighbors = 0
  for row in range(-1, 2):
    for column in range(-1, 2):
      # Skip the current cell
      if row == 0 and column == 0:
        continue
      # Get the coordinates of the neighbor cell
      neighbor_row = i + row
      neighbor_col = j + column
      # Check if the neighbor cell is within the grid boundaries
      if 0 <= neighbor_row < len(grid) and 0 <= neighbor_col < len(grid[0]):
        # Check if the neighbor cell is alive
        if grid[neighbor_row][neighbor_col]:
          live_neighbors += 1
  # Apply Conway's Game of Life rules
  if isAlive:
    if live_neighbors < 2 or live_neighbors > 3:
      return False
    else:
      return True
  else:
    if live_neighbors == 3:
      return True
    else:
      return False
  
square_coordinates = read_coordinates("square.in")

rules = input("Welcome to Conway's Game of Life. We start with a 30 x 60 grid of cells, either alive or dead. Here are the rules:\n1. Any live cells with fewer than two live neighbors dies, as if by underpopulation.\n2. Any live cell with two or three live neighbors lives on to the next generation.\n3. Any live cell with more than three live neighbors dies, as if by overpoulation.\n4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n Press Enter to conitnue ")

grid = []
for i in range (30):
  listInGrid = []
  for j in range (60):
    listInGrid.append(False)
  grid.append(listInGrid)
for n in square_coordinates:
  grid[n[0]][n[1]] = True

printGrid(grid)
